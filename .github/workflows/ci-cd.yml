name: SNAKEIUM 2.0 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Test Matrix - Multiple Python versions and OS
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        exclude:
          # macOS arm64 doesn't support older Python versions
          - os: macOS-latest
            python-version: "3.8"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip python3-venv
        sudo apt-get install -y libasound2-dev libportaudio2 libportaudiocpp0
        # SDL dependencies for pygame
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew update
        brew install portaudio
        brew install sdl2 sdl2_image sdl2_mixer sdl2_ttf

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: Run code formatting check
      run: |
        black --check --diff src/ tests/ main.py

    - name: Run linting
      run: |
        flake8 src/ tests/ main.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ main.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports || true

    - name: Run enhanced tests
      env:
        SDL_VIDEODRIVER: dummy
        SDL_AUDIODRIVER: dummy
      run: |
        python tests/test_enhanced.py
        pytest tests/ -v --cov=snakeium --cov-report=xml

    - name: Test legacy compatibility
      env:
        SDL_VIDEODRIVER: dummy
        SDL_AUDIODRIVER: dummy
      run: |
        python main.py --help
        python main.py --version

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Code Quality Analysis
  quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Security scan with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Build and Package
  build:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [test, quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine

    - name: Build source and wheel distributions
      run: |
        python -m build

    - name: Check distribution packages
      run: |
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  # Create Standalone Executables
  package:
    name: Create Executables for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [test, quality]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            executable: snakeium-linux
          - os: windows-latest
            executable: snakeium-windows.exe
          - os: macOS-latest
            executable: snakeium-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew install sdl2 sdl2_image sdl2_mixer sdl2_ttf

    - name: Install dependencies and PyInstaller
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create executable
      run: |
        pyinstaller --onefile --windowed --name ${{ matrix.executable }} main.py

    - name: Upload executables
      uses: actions/upload-artifact@v3
      with:
        name: executables-${{ matrix.os }}
        path: dist/${{ matrix.executable }}*

  # Deploy to PyPI (on release)
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.7
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Create GitHub Release with Executables
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [package]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - name: Download all executables
      uses: actions/download-artifact@v3
      with:
        pattern: executables-*
        merge-multiple: true

    - name: Upload executables to release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          snakeium-linux
          snakeium-windows.exe
          snakeium-macos
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, release]
    if: always() && (needs.deploy.result != 'skipped' || needs.release.result != 'skipped')

    steps:
    - name: Notify success
      if: needs.deploy.result == 'success' || needs.release.result == 'success'
      run: |
        echo "üéâ SNAKEIUM 2.0 deployed successfully!"
        echo "üì¶ Available on PyPI: https://pypi.org/project/snakeium-ghostkitty/"
        echo "üöÄ GitHub Release: https://github.com/chousemp3/SNAKEIUM/releases"

    - name: Notify failure
      if: needs.deploy.result == 'failure' || needs.release.result == 'failure'
      run: |
        echo "‚ùå SNAKEIUM 2.0 deployment failed"
        echo "üîç Check the workflow logs for details"
